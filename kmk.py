import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import exceptions
import sqlite3
import re

API_TOKEN = '7718675941:AAGX2yhPnuXtcbnVyTQO07pgHAmAzRV-aS8'
CHANNEL_ID = -1002348804504
LOG_CHANNEL_ID = -4606061260
DATABASE_NAME = 'bot.db'
ADMIN_ID = 7307366104
CHANNEL_ID_TO_DELETE = 'vkmklove'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Mode(StatesGroup):
    mode = State()
    send_message = State()

conn = sqlite3.connect(DATABASE_NAME)
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users
    (id INTEGER PRIMARY KEY, mode TEXT DEFAULT '–ù–µ –≤—ã–±—Ä–∞–Ω')
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS banned_words
    (word TEXT PRIMARY KEY)
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS banned_users
    (id INTEGER PRIMARY KEY)
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats
    (id INTEGER PRIMARY KEY, total INTEGER DEFAULT 0, anonymous INTEGER DEFAULT 0, public INTEGER DEFAULT 0)
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS telegram_users
    (id INTEGER PRIMARY KEY, username TEXT)
''')

conn.commit()

def is_banned(user_id):
    cursor.execute('SELECT * FROM banned_users WHERE id = ?', (user_id,))
    return cursor.fetchone() is not None


def get_mode(user_id):
    cursor.execute('SELECT mode FROM users WHERE id = ?', (user_id,))
    mode = cursor.fetchone()
    if mode is None:
        return '–ù–µ –≤—ã–±—Ä–∞–Ω'
    else:
        return mode[0]

def set_mode(user_id, mode):
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    if user is None:
        cursor.execute('INSERT INTO users (id, mode) VALUES (?, ?)', (user_id, mode))
    else:
        cursor.execute('UPDATE users SET mode = ? WHERE id = ?', (mode, user_id))
    conn.commit()

def get_banned_words():
    cursor.execute('SELECT word FROM banned_words')
    words = cursor.fetchall()
    return [word[0] for word in words]

def add_banned_word(word):
    cursor.execute('INSERT INTO banned_words (word) VALUES (?)', (word,))
    conn.commit()

def remove_banned_word(word):
    cursor.execute('DELETE FROM banned_words WHERE word = ?', (word,))
    conn.commit()

add_word = ''
remove_word = ''

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    cursor.execute('SELECT * FROM telegram_users WHERE id = ?', (message.from_user.id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO telegram_users (id, username) VALUES (?, ?)', (message.from_user.id, message.from_user.username))
        conn.commit()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'))
    keyboard.add(types.KeyboardButton('üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
    await message.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! ü§ñ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
async def send_message(message: types.Message, state: FSMContext):
    mode = get_mode(message.from_user.id)
    if mode == '–ù–µ –≤—ã–±—Ä–∞–Ω':
        await message.reply('üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö! üö®')
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_send'))
        await message.reply(f'üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({mode}):', reply_markup=keyboard)
        await Mode.send_message.set()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'cancel_send', state=Mode.send_message)
async def cancel_send(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'))
    keyboard.add(types.KeyboardButton('üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
    await callback_query.message.reply('üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text not in ['üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üìù –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏', 'üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º', 'üì¢ –ü—É–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º', 'üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîô –ù–∞–∑–∞–¥'], state=Mode.send_message)
async def handle_message(message: types.Message, state: FSMContext):
    if is_banned(message.from_user.id):
        await message.reply('üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!')
        return
    text = message.text
    banned_words = get_banned_words()
    for word in banned_words:
        if re.search(r'\b' + re.escape(word) + r'\b', text, re.IGNORECASE):
            await message.reply('üö´ –≠—Ç–æ —Å–ª–æ–≤–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!')
            return
    if re.search(r'\b(https?://|www\.)\S+\b', text):
        await message.reply('üö´ –°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è!')
        return
    if re.search(r'\b\+\d{1,3}\s?\(?\d{1,3}\)?[\s.-]?\d{1,5}[\s.-]?\d{1,9}\b', text):
        await message.reply('üö´ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è!')
        return
    if re.search(r'@\w+', text):
        await message.reply('üö´ –Æ–∑–µ—Ä–Ω–µ–π–º—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è!')
        return
    mode = get_mode(message.from_user.id)
    cursor.execute('SELECT * FROM user_stats WHERE id = ?', (message.from_user.id,))
    stats = cursor.fetchone()
    if stats is None:
        stats = (message.from_user.id, 0, 0, 0)
        cursor.execute('INSERT INTO user_stats (id, total, anonymous, public) VALUES (?, ?, ?, ?)', stats)
        conn.commit()
    if mode == '–ê–Ω–æ–Ω–∏–º–Ω—ã–π':
        await bot.send_message(CHANNEL_ID, text)
        user = message.from_user
        log_message = f'‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç üë§ {user.mention} ({user.full_name})\n üÜî ID: {user.id}\n üí¨–ê–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª:\n\n{text}'
        await bot.send_message(LOG_CHANNEL_ID, log_message)
        await message.reply('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!')
        cursor.execute('UPDATE user_stats SET total = total + 1, anonymous = anonymous + 1 WHERE id = ?', (message.from_user.id,))
        conn.commit()
    elif mode == '–ü—É–±–ª–∏—á–Ω—ã–π':
        await bot.forward_message(CHANNEL_ID, message.from_user.id, message.message_id)
        user = message.from_user
        log_message = f'‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç üë§ {user.mention} ({user.full_name})\n üÜî ID: {user.id}\n üí¨–ü—É–±–ª–∏—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª:\n\n{text}'
        await bot.send_message(LOG_CHANNEL_ID, log_message)
        await message.reply('üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É–±–ª–∏—á–Ω–æ!')
        cursor.execute('UPDATE user_stats SET total = total + 1, public = public + 1 WHERE id = ?', (message.from_user.id,))
        conn.commit()
    await state.finish()

@dp.message_handler(lambda message: message.text == 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üìù –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏'))
    keyboard.add(types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    keyboard.add(types.KeyboardButton('üìà –í—Å–µ–æ–±—â–∏–π —Ç–æ–ø'))
    keyboard.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    if message.from_user.id == ADMIN_ID:
        keyboard.add(types.KeyboardButton('üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞'))
    await message.reply('üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == 'üìà –í—Å–µ–æ–±—â–∏–π —Ç–æ–ø')
async def top(message: types.Message):
    cursor.execute('SELECT id, public FROM user_stats ORDER BY public DESC LIMIT 10')
    top_users = cursor.fetchall()
    text = 'üìà –í—Å–µ–æ–±—â–∏–π —Ç–æ–ø:\n'
    for i, user in enumerate(top_users):
        cursor.execute('SELECT username FROM telegram_users WHERE id = ?', (user[0],))
        username = cursor.fetchone()
        if username is not None:
            text += f'{i+1}. @{username[0]} - {user[1]} –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n'
        else:
            text += f'{i+1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - {user[1]} –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n'
    await bot.send_message(CHANNEL_ID, text)
    await message.reply('üìà –í—Å–µ–æ–±—â–∏–π —Ç–æ–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!')

@dp.message_handler(lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def statistics(message: types.Message):
    cursor.execute('SELECT * FROM user_stats WHERE id = ?', (message.from_user.id,))
    stats = cursor.fetchone()
    if stats is None:
        stats = (message.from_user.id, 0, 0, 0)
        cursor.execute('INSERT INTO user_stats (id, total, anonymous, public) VALUES (?, ?, ?, ?)', stats)
        conn.commit()
    total = stats[1]
    anonymous = stats[2]
    public = stats[3]
    await message.reply(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}\n–ê–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {anonymous}\n–ü—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {public}')

@dp.message_handler(lambda message: message.text == 'üìù –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏')
async def send_mode(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º'))
    keyboard.add(types.KeyboardButton('üì¢ –ü—É–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º'))
    keyboard.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'))
    await message.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == 'üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º', state='*')
async def anonymous_mode(message: types.Message, state: FSMContext):
    set_mode(message.from_user.id, '–ê–Ω–æ–Ω–∏–º–Ω—ã–π')
    await message.reply('üîí –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ê–Ω–æ–Ω–∏–º–Ω—ã–π')

@dp.message_handler(lambda message: message.text == 'üì¢ –ü—É–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º', state='*')
async def public_mode(message: types.Message, state: FSMContext):
    set_mode(message.from_user.id, '–ü—É–±–ª–∏—á–Ω—ã–π')
    await message.reply('üì¢ –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ü—É–±–ª–∏—á–Ω—ã–π')

@dp.message_handler(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
async def back_to_settings(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üìù –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏'))
    keyboard.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    if message.from_user.id == ADMIN_ID:
        keyboard.add(types.KeyboardButton('üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞'))
    await message.reply('üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
async def back(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'))
    keyboard.add(types.KeyboardButton('üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
    await message.reply('üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == 'üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞')
async def admin_settings(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton('üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ'))
        keyboard.add(types.KeyboardButton('üìù –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ'))
        keyboard.add(types.KeyboardButton('üìù –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤'))
        keyboard.add(types.KeyboardButton('üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        keyboard.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
        await message.reply('üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞:', reply_markup=keyboard)
    else:
        await message.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!')

@dp.message_handler(lambda message: message.text == 'üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def ban_user(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.reply('üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:')
        @dp.message_handler(lambda message: message.text.isdigit())
        async def ban_user_handler(message: types.Message):
            user_id = int(message.text)
            cursor.execute('INSERT INTO banned_users (id) VALUES (?)', (user_id,))
            conn.commit()
            await message.reply(f'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–∞–Ω–µ–Ω!')
    else:
        await message.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!')  

@dp.message_handler(commands=['addword'])
async def add_banned_word_command(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        word = message.get_args()
        if word:
            add_banned_word(word)
            await message.reply(f'üö´ –°–ª–æ–≤–æ "{word}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤!')
        else:
            await message.reply('üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!')
    else:
        await message.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!')

@dp.message_handler(commands=['delword'])
async def remove_banned_word_command(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        word = message.get_args()
        if word:
            if word in get_banned_words():
                remove_banned_word(word)
                await message.reply(f'üö´ –°–ª–æ–≤–æ "{word}" —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤!')
            else:
                await message.reply(f'üö´ –°–ª–æ–≤–æ "{word}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤!')
        else:
            await message.reply('üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!')
    else:
        await message.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!')

@dp.message_handler(commands=['getword'])
async def get_banned_words_command(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        banned_words = get_banned_words()
        if banned_words:
            text = 'üö´ –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n'
            for word in banned_words:
                text += word + '\n'
            await message.reply(text)
        else:
            await message.reply('üö´ –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç!')
    else:
        await message.reply('üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω!')

@dp.message_handler(lambda message: message.text.startswith(f'https://t.me/{CHANNEL_ID_TO_DELETE}'))
async def delete_message(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–î–∞', callback_data='yes'))
    keyboard.add(types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no'))
    await message.reply('–í—ã –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=keyboard)

link = ''

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'yes')
async def delete_message_yes(callback_query: types.CallbackQuery):
    global link
    link = callback_query.message.reply_to_message.text
    await bot.send_message(ADMIN_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –ø–æ–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {link}')
    await callback_query.message.delete()
    await callback_query.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ADMIN—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'no')
async def delete_message_no(callback_query: types.CallbackQuery):
    await callback_query.answer('–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
